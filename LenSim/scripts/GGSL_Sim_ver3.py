# %% [markdown]
# # SimulationAPI
# This notebooks provides examples in how to use the lenstronomy.SimulationAPI modules in simulating (realistic) mock lenses taylored to a specific observation and instrument.
# 
# The module enables to use the astronomical magnitude conventions and can translate those into the lenstronomy core module configurations.

# %%
import copy
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import corner
import time
import lenstronomy
import os
import datetime as dt
import logging
import sys

# lenstronomy module import
import lenstronomy.Util.data_util as data_util
import lenstronomy.Util.util as util
import lenstronomy.Plots.plot_util as plot_util
from lenstronomy.SimulationAPI.sim_api import SimAPI
from lenstronomy.LightModel.Profiles.gaussian import GaussianEllipse
from lenstronomy.LensModel.lens_model import LensModel
from lenstronomy.LensModel.Solver.lens_equation_solver import LensEquationSolver
from lenstronomy.LightModel.light_model import LightModel
from lenstronomy.PointSource.point_source import PointSource
from lenstronomy.ImSim.image_model import ImageModel
import lenstronomy.Util.param_util as param_util
import lenstronomy.Util.simulation_util as sim_util
import lenstronomy.Util.image_util as image_util
from lenstronomy.Util import kernel_util
import lenstronomy.Util.util as util
# initial input simulation
from lenstronomy.Data.imaging_data import ImageData
from lenstronomy.Data.psf import PSF
gauss = GaussianEllipse()


c = dt.datetime.now()

# Get the script name
script_name = os.path.basename(__file__)
# Configure logging
log_filename = f"/data/a.saricaoglu/repo/RubinsForge/LenSim/logs/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/script.log"
os.makedirs(os.path.dirname(log_filename), exist_ok=True)
logging.basicConfig(filename=log_filename, level=logging.INFO, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Redirect stdout and stderr to the log file
class StreamToLogger:
    def __init__(self, logger, log_level):
        self.logger = logger
        self.log_level = log_level
        self.linebuf = ''

    def write(self, buf):
        for line in buf.rstrip().splitlines():
            self.logger.log(self.log_level, line.rstrip())

    def flush(self):
        pass

sys.stdout = StreamToLogger(logging.getLogger('STDOUT'), logging.INFO)
# sys.stderr = StreamToLogger(logging.getLogger('STDERR'), logging.ERROR)
# Log the start of the script with the script name
logging.info(f'Script {script_name} started')

if not os.path.exists("/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/" +  str(c.strftime("%m.%d")) + "/" + c.strftime('%H%M')):
    directory = "/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/" +  str(c.strftime("%m.%d")) + "/" + c.strftime('%H%M')
    os.makedirs(directory)
    logging.info(f"Directory {directory} created")
# %% [markdown]
# ## simulation choices
# We define the observational conditions and the instrument the mock data is produced with.

# %%
# define lens configuration and cosmology (not for lens modelling)
z_lens = 0.5
z_source = 1.5
from astropy.cosmology import FlatLambdaCDM
cosmo = FlatLambdaCDM(H0=70, Om0=0.3, Ob0=0.)

# %% [markdown]
# ## Define camera and observations
# As an example, we define the camera and observational settings of a LSST-like observation. We define one camera setting and three different observations corresponding th g,r,i imaging.
# 
# For the complete list of possible settings, we refer to the SimulationAPI.observation_api classes. There are pre-configured settings which approximately mimic observations from current and future instruments. Be careful using those and check whether they are sufficiently accurate for your specific science case!

# %%
# Instrument setting from pre-defined configurations

from lenstronomy.SimulationAPI.ObservationConfig.LSST import LSST

LSST_g = LSST(band='g', psf_type='GAUSSIAN', coadd_years=10)
kwargs_g_band = LSST_g.kwargs_single_band()
LSST_r = LSST(band='r', psf_type='GAUSSIAN', coadd_years=10)
kwargs_r_band = LSST_r.kwargs_single_band()
LSST_i = LSST(band='i', psf_type='GAUSSIAN', coadd_years=10)
kwargs_i_band = LSST_i.kwargs_single_band()

# lenstronomy provides these setting to be imported with the SimulationAPI.observation_constructor routines.


# %%
#Tailored individual settings (as an example):


LSST_camera = {'read_noise': 10,  # std of noise generated by read-out (in units of electrons)
               'pixel_scale': 0.263,  # scale (in arcseonds) of pixels
               'ccd_gain': 4.5  # electrons/ADU (analog-to-digital unit). A gain of 8 means that the camera digitizes the CCD signal so that each ADU corresponds to 8 photoelectrons.
              }

LSST_g_band_obs = {'exposure_time': 15.,  # exposure time per image (in seconds)
                   'sky_brightness': 22.26,  # sky brightness (in magnitude per square arcseconds)
                   'magnitude_zero_point': 28.30,  # magnitude in which 1 count per second per arcsecond square is registered (in ADU's)
                   'num_exposures': 1,  # number of exposures that are combined
                   'seeing': 0.77,  # full width at half maximum of the PSF (if not specific psf_model is specified)
                   'psf_type': 'GAUSSIAN',  # string, type of PSF ('GAUSSIAN' and 'PIXEL' supported)
                   'kernel_point_source': None  # 2d numpy array, model of PSF centered with odd number of pixels per axis (optional when psf_type='PIXEL' is chosen)
                  }

LSST_r_band_obs = {'exposure_time': 15.,
                   'sky_brightness': 21.2,
                   'magnitude_zero_point': 28.13,
                   'num_exposures': 1,
                   'seeing': 0.73,
                   'psf_type': 'GAUSSIAN'}

LSST_i_band_obs = {'exposure_time': 15.,
                   'sky_brightness': 20.48,
                   'magnitude_zero_point': 27.79,
                   'num_exposures': 1,
                   'seeing': 0.71,
                   'psf_type': 'GAUSSIAN'}

# here we merge observations and instrument for the three bands
kwargs_g_band = util.merge_dicts(LSST_camera, LSST_g_band_obs)
kwargs_r_band = util.merge_dicts(LSST_camera, LSST_r_band_obs)
kwargs_i_band = util.merge_dicts(LSST_camera, LSST_i_band_obs)

# %% [markdown]
# ## Define model settings
# 
# The model settings are handled by the SimulationAPI.model_api ModelAPI class. 
# The role is to return instances of the lenstronomy LightModel, LensModel, PointSource modules according to the options chosen by the user. Currently, all other model choices are equivalent to the ones provided by LightModel, LensModel, PointSource.
# The current options of the class instance only describe a subset of possibilities and we refer to the specific class instances for details about all the possibilities.
# 
# For this example, we chose a single lens plane and a single source plane, elliptical Sersic profiles and an additional lensed point source.
model_num = 2

for k in range(0,model_num):
    print("Model number:", k)
    # %%
    # lensing quantities
    kwargs_shear = {'gamma1': np.random.uniform(-0.1, 0.1), 'gamma2': np.random.uniform(-0.1, 0.1)}
    kwargs_pemd = {
        'theta_E': np.random.uniform(0.8, 5),
        'gamma': np.random.uniform(1.5, 2.5),
        'center_x': np.random.uniform(-1.0, 1.0),
        'center_y': np.random.uniform(-1.0, 1.0),
        'e1': np.random.uniform(-0.3, 0.3),
        'e2': np.random.uniform(-0.3, 0.3)
    }
    kwargs_nfw = {
        'alpha_Rs': np.random.uniform(0., 1.),
        'r_core': np.random.uniform(0.01, 0.5),
        'Rs': np.random.uniform(0.5, 2),
        'center_x': np.random.uniform(-1.0, 1.0),
        'center_y': np.random.uniform(-1.0, 1.0)
    }
    lens_model_list = ['EPL', 'SHEAR', 'CNFW']
    kwargs_lens = [kwargs_pemd, kwargs_shear, kwargs_nfw]
    lens_model_class = LensModel(lens_model_list=lens_model_list)

    # Randomize source type
    source_x = np.random.uniform(-1.0, 1.0)
    source_y = np.random.uniform(-1.0, 1.0)

    # Randomize Sersic parameters in the initial simulation
    phi_G, q = np.random.uniform(0, 2*np.pi), np.random.uniform(0.5, 1.0)
    e1, e2 = param_util.phi_q2_ellipticity(phi_G, q)
    kwargs_sersic_source = {
        'amp': np.random.uniform(1000, 10000),
        'R_sersic': np.random.uniform(0.05, 1.0),
        'n_sersic': np.random.uniform(0.5, 4.0),
        'e1': e1,
        'e2': e2,
        'center_x': source_x,
        'center_y': source_y
    }
    source_model_list = ['SERSIC_ELLIPSE']
    kwargs_source = [kwargs_sersic_source]
    source_model_class = LightModel(light_model_list=source_model_list)

    # Randomize lens light model
    phi_G, q = np.random.uniform(0, 2*np.pi), np.random.uniform(0.5, 1.0)
    e1, e2 = param_util.phi_q2_ellipticity(phi_G, q)
    kwargs_sersic_lens = {
        'amp': np.random.uniform(1000, 10000),
        'R_sersic': np.random.uniform(0.05, 1.0),
        'n_sersic': np.random.uniform(0.5, 4.0),
        'e1': e1,
        'e2': e2,
        'center_x': np.random.uniform(-1.0, 1.0),
        'center_y': np.random.uniform(-1.0, 1.0)
    }
    lens_light_model_list = ['SERSIC_ELLIPSE']
    kwargs_lens_light = [kwargs_sersic_lens]
    lens_light_model_class = LightModel(light_model_list=lens_light_model_list)

    kwargs_model = {'lens_model_list': lens_model_list,
                    'source_light_model_list': source_model_list,
                    'lens_light_model_list': lens_light_model_list
                }
    
    # Print all kwargs
    print("model parameters:")
    print("kwargs_shear:", kwargs_shear)
    print("kwargs_pemd:", kwargs_pemd)
    print("kwargs_nfw:", kwargs_nfw)
    print("kwargs_sersic_source:", kwargs_sersic_source)
    print("kwargs_sersic_lens:", kwargs_sersic_lens)

    # %% [markdown]
    # ## Generate SimAPI instance for the different observations
    # Here we make an instanbce of the SimAPI class and execute the major tasks accessible as the interface to the ImSim core module.

    # %%
    numpix = 64  # number of pixels per axis of the image to be modelled

    # here we define the numerical options used in the ImSim module. 
    # Have a look at the ImageNumerics class for detailed descriptions.
    # If not further specified, the default settings are used.
    kwargs_numerics = {'supersampling_factor': 1, 'supersampling_convolution': False}

    sim_g = SimAPI(numpix=numpix, kwargs_single_band=kwargs_g_band, kwargs_model=kwargs_model)
    sim_r = SimAPI(numpix=numpix, kwargs_single_band=kwargs_r_band, kwargs_model=kwargs_model)
    sim_i = SimAPI(numpix=numpix, kwargs_single_band=kwargs_i_band, kwargs_model=kwargs_model)

    # return the ImSim instance. With this class instance, you can compute all the
    # modelling accessible of the core modules. See class documentation and other notebooks.
    imSim_g = sim_g.image_model_class(kwargs_numerics)
    imSim_r = sim_r.image_model_class(kwargs_numerics)
    imSim_i = sim_i.image_model_class(kwargs_numerics)

    # kwargs_data_g = [sim_g.data_class.background_rms, sim_g.data_class.exp_time, sim_g.kwargs_data]
    # print( sim_g.kwargs_data)

    # %% [markdown]
    # ## Brightness definitions in magnitude space
    # One core feature is the support of light profile amplitudes in astronomical magnitude space (at least for few selected well defined brightness profiles).
    # 
    # We first define all parameters in magnitude space and then use the SimAPI routine to translate the arguments into lenstronomy conventions used by the ImSim module. The second model of each light component we defined as 'INTERPOL', which sets an interpolation grid given an image. This can be used to past real galaxies as lenses or sources into lenstronomy.

    # %%

    # g-band

    # lens light
    kwargs_lens_light_mag_g = [{'magnitude': 14, 'R_sersic': .6, 'n_sersic': 4, 'e1': 0.1, 'e2': -0.1, 'center_x': 0, 'center_y': 0}]
    # source light
    kwargs_source_mag_g = [{'magnitude': 19, 'R_sersic': 0.3, 'n_sersic': 1, 'e1': -0.3, 'e2': -0.2, 'center_x': 0, 'center_y': 0}]
    # point source
    kwargs_ps_mag_g = [{'magnitude': 21, 'ra_source': 0.03, 'dec_source': 0}]



    # and now we define the colors of the other two bands

    # r-band
    g_r_source = 1  # color mag_g - mag_r for source
    g_r_lens = -1  # color mag_g - mag_r for lens light
    g_r_ps = 0
    kwargs_lens_light_mag_r = copy.deepcopy(kwargs_lens_light_mag_g)
    kwargs_lens_light_mag_r[0]['magnitude'] -= g_r_lens

    kwargs_source_mag_r = copy.deepcopy(kwargs_source_mag_g)
    kwargs_source_mag_r[0]['magnitude'] -= g_r_source

    kwargs_ps_mag_r = copy.deepcopy(kwargs_ps_mag_g)
    kwargs_ps_mag_r[0]['magnitude'] -= g_r_ps


    # i-band
    g_i_source = 2
    g_i_lens = -2
    g_i_ps = 0
    kwargs_lens_light_mag_i = copy.deepcopy(kwargs_lens_light_mag_g)
    kwargs_lens_light_mag_i[0]['magnitude'] -= g_i_lens

    kwargs_source_mag_i = copy.deepcopy(kwargs_source_mag_g)
    kwargs_source_mag_i[0]['magnitude'] -= g_i_source

    kwargs_ps_mag_i = copy.deepcopy(kwargs_ps_mag_g)
    kwargs_ps_mag_i[0]['magnitude'] -= g_i_ps

    # turn magnitude kwargs into lenstronomy kwargs
    kwargs_lens_light_g, kwargs_source_g, kwargs_ps_g = sim_g.magnitude2amplitude(kwargs_lens_light_mag_g, kwargs_source_mag_g, kwargs_ps_mag_g)
    kwargs_lens_light_r, kwargs_source_r, kwargs_ps_r = sim_r.magnitude2amplitude(kwargs_lens_light_mag_r, kwargs_source_mag_r, kwargs_ps_mag_r)
    kwargs_lens_light_i, kwargs_source_i, kwargs_ps_i = sim_i.magnitude2amplitude(kwargs_lens_light_mag_i, kwargs_source_mag_i, kwargs_ps_mag_i)


    # %% [markdown]
    # ## setting lens model parameters
    # And finally we need a lens model. The default lensing units are in observed deflection angle (arc seconds) mapping the image to the source plane (reduced angles). In a single lens and single source plane model, this is all we need to specify and no futher cosmology is required.

    # %%
    # kwargs_lens = [
    #     {'theta_E': 2., 'e1': 0.4, 'e2': -0.1, 'center_x': 0, 'center_y': 0},  # SIE model
    #     {'gamma1': 0.03, 'gamma2': 0.01, 'ra_0': 0, 'dec_0': 0}  # SHEAR model
    # ]


    # %% [markdown]
    # ## simluate image
    # Finally we can simulate the images with the ImageModel class instance and the lenstronomy parameters for the different bands. Note that in the specific example we included a point source (representing a quasar) in the center of the lensed galaxy. The SimulationAPI supports various options. Further down below we simulate multi-lens multi-source plane configurations too.

    # %%
    image_g = imSim_g.image(kwargs_lens, kwargs_source_g, kwargs_lens_light_g)
    image_r = imSim_r.image(kwargs_lens, kwargs_source_r, kwargs_lens_light_r)
    image_i = imSim_i.image(kwargs_lens, kwargs_source_i, kwargs_lens_light_i)

    # add noise
    image_g += sim_g.noise_for_model(model=image_g)
    image_r += sim_r.noise_for_model(model=image_r)
    image_i += sim_i.noise_for_model(model=image_i)

    # image_g = image_g/200
    # image_g = np.sqrt(abs(image_g))
    print(kwargs_g_band['pixel_scale'], kwargs_g_band['exposure_time'],'pixel_size', imSim_g.Data.pixel_width )
    # # initial input simulation
    from lenstronomy.Data.imaging_data import ImageData
    from lenstronomy.Data.psf import PSF
    kwargs_data = sim_util.data_configure_simple(numpix,imSim_g.Data.pixel_width, kwargs_g_band['exposure_time'],imSim_g.Data.background_rms)
    print(kwargs_data.keys())

    data_class = ImageData(**kwargs_data)
    # generate the psf variables
    kwargs_data['image_data'] = image_g
    data_class.update_data(image_g)
    kwargs_psf = {'psf_type': imSim_g.PSF.psf_type, 'fwhm': imSim_g.PSF.fwhm, 'pixel_size': imSim_g.Data.pixel_width, 'kernel_point_source': imSim_g.PSF.kernel_point_source}

    print(kwargs_psf)

    # and plot it

    img = np.zeros((image_g.shape[0], image_g.shape[1], 3), dtype=float)
    img[:,:,0] = plot_util.sqrt(image_g, scale_min=0, scale_max=10000)
    img[:,:,1] = plot_util.sqrt(image_r, scale_min=0, scale_max=10000)
    img[:,:,2] = plot_util.sqrt(image_i, scale_min=0, scale_max=10000)

    plt.clf()
    plt.imshow(img, aspect='equal', origin='lower')
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_rgb.png")
    # display the initial simulated image
    cmap_string = 'gray'
    cmap = plt.get_cmap(cmap_string)
    cmap.set_bad(color='k', alpha=1.)
    cmap.set_under('k')

    # print(sim_g.data_class.data)
    # print(sim_g.kwargs_data['image_data'])
    # sim_g.kwargs_data['image_data'] = image_g
    # sim_g.data_class.update_data(image_g)
    # print(sim_g.data_class.data)
    # print(sim_g.kwargs_data['image_data'])
    v_min = 0
    v_max = 2
    print(min((image_g.flatten())), max((image_g.flatten())))
    f, axes = plt.subplots(1, 1, figsize=(6, 6), sharex=False, sharey=False)
    ax = axes
    im = ax.matshow(np.log10(image_g), origin='lower',  cmap=cmap, extent=[0, 1, 0, 1])
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
    ax.autoscale(False)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}.png")

    # %% [markdown]
    # 

    # %% [markdown]
    # # Recovering the input parameters
    # Now we use lenstronomy to recover the input parameters. First, we want to have a fair estimate of the macro-model parameters and we do not add the NFW subclump.
    # 
    # We define initial guesses, their spread and bounds on all the parameters and run a Particle Swarm Optimization to minimize the $\chi^2$.

    # %%

    # First we only model the macro-model
    lens_model_simple_list = ['EPL', 'SHEAR']

    # lens model choicers
    fixed_lens = []
    kwargs_lens_init = []
    kwargs_lens_sigma = []
    kwargs_lower_lens = []
    kwargs_upper_lens = []

    fixed_lens.append({}) 
    kwargs_lens_init.append({'theta_E': 3., 'gamma': 2, 'center_x': 0.0, 'center_y': 0, 'e1': 0., 'e2': 0.})
    #kwargs_lens_init.append(kwargs_pemd)
    kwargs_lens_sigma.append({'theta_E': .1, 'e1': 0.1, 'e2': 0.1, 'gamma': 0.1, 'center_x': 0.1, 'center_y': 0.1})
    kwargs_lower_lens.append({'theta_E': 0.5,'e1': -0.5, 'e2': -0.5, 'gamma': 1.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens.append({'theta_E': 10, 'e1': 0.5, 'e2': 0.5, 'gamma': 2.5, 'center_x': 10, 'center_y': 10})

    fixed_lens.append({'ra_0': 0, 'dec_0': 0})
    kwargs_lens_init.append({'gamma1': 0.0, 'gamma2': 0.0})
    #kwargs_lens_init.append(kwargs_shear)
    kwargs_lens_sigma.append({'gamma1': 0.1, 'gamma2': 0.1})
    kwargs_lower_lens.append({'gamma1': -0.2, 'gamma2': -0.2})
    kwargs_upper_lens.append({'gamma1': 0.2, 'gamma2': 0.2})

    lens_params = [kwargs_lens_init, kwargs_lens_sigma, fixed_lens, kwargs_lower_lens, kwargs_upper_lens]

    # lens light model choices
    fixed_lens_light = []
    kwargs_lens_light_init = []
    kwargs_lens_light_sigma = []
    kwargs_lower_lens_light = []
    kwargs_upper_lens_light = []

    fixed_lens_light.append({})
    kwargs_lens_light_init.append(kwargs_sersic_lens)
    kwargs_lens_light_sigma.append({'n_sersic': 0.5, 'R_sersic': 0.1, 'e1': 0.1, 'e2': 0.1, 'center_x': 0.1, 'center_y': 0.1})
    kwargs_lower_lens_light.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.01, 'n_sersic': 0.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens_light.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 8, 'center_x': 10, 'center_y': 10})

    lens_light_params = [kwargs_lens_light_init, kwargs_lens_light_sigma, fixed_lens_light, kwargs_lower_lens_light, kwargs_upper_lens_light]


    fixed_source = []
    kwargs_source_init = []
    kwargs_source_sigma = []
    kwargs_lower_source = []
    kwargs_upper_source = []

    fixed_source.append({})
    kwargs_source_init.append(kwargs_sersic_source)
    kwargs_source_sigma.append({'n_sersic': 0.5, 'R_sersic': 0.05, 'e1': 0.1, 'e2': 0.1, 'center_x': 0.1, 'center_y': 0.1})
    kwargs_lower_source.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.001, 'n_sersic': .5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_source.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 5., 'center_x': 10, 'center_y': 10})

    source_params = [kwargs_source_init, kwargs_source_sigma, fixed_source, kwargs_lower_source, kwargs_upper_source]

    kwargs_model = {'lens_model_list': lens_model_simple_list, 
                    'lens_light_model_list': lens_light_model_list,
                    'source_light_model_list': source_model_list,
                    }

    kwargs_params = {'lens_model': lens_params,
                    'source_model': source_params,
                    'lens_light_model': lens_light_params}



    # numerical options and fitting sequences

    num_source_model = len(source_model_list)

    kwargs_constraints = {}

    kwargs_likelihood = {'check_bounds': True,
                        'source_marg': False,
                        }


    image_band = [kwargs_data, kwargs_psf, kwargs_numerics]
    multi_band_list = [image_band]
    kwargs_data_joint = {'multi_band_list': multi_band_list, 'multi_band_type': 'multi-linear'}
    # kwargs_init = [kwargs_lens, kwargs_source_g, kwargs_lens_light_g, []]


    mpi = False  # MPI possible, but not supported through that notebook.

    from lenstronomy.Workflow.fitting_sequence import FittingSequence
    fitting_seq = FittingSequence(kwargs_data_joint, kwargs_model, kwargs_constraints, kwargs_likelihood, kwargs_params, mpi=mpi)

    fitting_kwargs_list = [['PSO', {'sigma_scale': .1, 'n_particles': 100, 'n_iterations': 100}]]

    start_time = time.time()
    chain_list = fitting_seq.fit_sequence(fitting_kwargs_list)
    kwargs_result = fitting_seq.best_fit()
    end_time = time.time()
    print(end_time - start_time, 'total time needed for computation')
    print('============ CONGRATULATION, YOUR JOB WAS SUCCESSFUL ================ ')
    print('kwargs_result after EPL, SHEAR fitting:')
    print(kwargs_result)
    # %% [markdown]
    # ## analyse model output
    # Here we plot the output. Remember, the NFW subclump (which we did not model here) has also an effect on the macro-model that the mcromodel only fitting wants as goog as possible to compensate for. So the recovered macro-model parameters are not going to be identical with the input parameters.

    # %%
    from lenstronomy.Plots.model_plot import ModelPlot

    modelPlot = ModelPlot(multi_band_list, kwargs_model, kwargs_result, arrow_size=0.02, cmap_string="gist_heat")
        
    f, axes = plt.subplots(2, 3, figsize=(16, 8), sharex=False, sharey=False)

    modelPlot.data_plot(ax=axes[0,0])
    modelPlot.model_plot(ax=axes[0,1])
    modelPlot.normalized_residual_plot(ax=axes[0,2], v_min=-6, v_max=6)
    modelPlot.source_plot(ax=axes[1, 0], deltaPix_source=0.01, numPix=100)
    modelPlot.convergence_plot(ax=axes[1, 1], v_max=1)
    modelPlot.magnification_plot(ax=axes[1, 2])
    f.tight_layout()
    f.subplots_adjust(left=0.05, bottom=0.05, right=None, top=0.9, wspace=0.1, hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_fit.png")
   
    f, axes = plt.subplots(2, 3, figsize=(16, 8), sharex=False, sharey=False)

    modelPlot.decomposition_plot(ax=axes[0,0], text='Lens light', lens_light_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,0], text='Lens light convolved', lens_light_add=True)
    modelPlot.decomposition_plot(ax=axes[0,1], text='Source light', source_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,1], text='Source light convolved', source_add=True)
    modelPlot.decomposition_plot(ax=axes[0,2], text='All components', source_add=True, lens_light_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,2], text='All components convolved', source_add=True, lens_light_add=True, point_source_add=True)
    f.tight_layout()
    f.subplots_adjust(left=None, bottom=None, right=None, top=0.9, wspace=0., hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_decomposition.png")

    f, axes = plt.subplots(1, 3, figsize=(16, 4), sharex=False, sharey=False)

    modelPlot.subtract_from_data_plot(ax=axes[0], text='Data')
    modelPlot.subtract_from_data_plot(ax=axes[1], text='Data - Lens Light', lens_light_add=True)
    modelPlot.subtract_from_data_plot(ax=axes[2], text='Data - Source Light', source_add=True)
    f.tight_layout()
    f.subplots_adjust(left=None, bottom=None, right=None, top=0.9, wspace=0.02, hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_subtraction.png")

 
    # %% [markdown]
    # ## Adding a clump
    # Now in a second step we add a clump in the lens model. This model is identical (in terms of parameterisation) as the created mock data. The aim now is that the PSO will find the clump at the right position with the right properties. This is a non-trivial convergence problem due to the many covariances also with the macro-model.

    # %%
    # add substructure

    lens_model_substructure_list = ['EPL', 'SHEAR', 'CNFW']

    # lens model choicers
    fixed_lens = []
    kwargs_lens_init = []
    kwargs_lens_sigma = []
    kwargs_lower_lens = []
    kwargs_upper_lens = []

    fixed_lens.append({}) 
    kwargs_lens_init.append(kwargs_result['kwargs_lens'][0])
    #kwargs_lens_init.append(kwargs_pemd)
    kwargs_lens_sigma.append({'theta_E': .01, 'e1': 0.01, 'e2': 0.01, 'gamma': 0.01, 'center_x': 0.01, 'center_y': 0.01})
    kwargs_lower_lens.append({'theta_E': 0.8,'e1': -0.5, 'e2': -0.5, 'gamma': 1.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens.append({'theta_E': 10, 'e1': 0.5, 'e2': 0.5, 'gamma': 2.5, 'center_x': 10, 'center_y': 10})

    fixed_lens.append({'ra_0': 0, 'dec_0': 0})
    kwargs_lens_init.append(kwargs_result['kwargs_lens'][1])
    #kwargs_lens_init.append(kwargs_shear)
    kwargs_lens_sigma.append({'gamma1': 0.01, 'gamma2': 0.01})
    kwargs_lower_lens.append({'gamma1': -0.2, 'gamma2': -0.2})
    kwargs_upper_lens.append({'gamma1': 0.2, 'gamma2': 0.2})


    fixed_lens.append({})
    kwargs_lens_init.append({'alpha_Rs': 0.5, 'r_core' : 0.2, 'Rs': 0.7, 'center_x': 0, 'center_y': 0})
    #kwargs_lens_init.append(kwargs_nfw)
    kwargs_lens_sigma.append({'alpha_Rs': 0.01, 'r_core' : 0.05,'Rs': 0.05, 'center_x': 3, 'center_y': 3})
    kwargs_lower_lens.append({'alpha_Rs': 0.,'r_core' : 0., 'Rs': 0.0001, 'center_x': -3, 'center_y': -3})
    kwargs_upper_lens.append({'alpha_Rs': 1., 'r_core' : 0.5 ,'Rs': 2, 'center_x': 3, 'center_y': 3})

    lens_params = [kwargs_lens_init, kwargs_lens_sigma, fixed_lens, kwargs_lower_lens, kwargs_upper_lens]

    # lens light model choices
    fixed_lens_light = []
    kwargs_lens_light_init = []
    kwargs_lens_light_sigma = []
    kwargs_lower_lens_light = []
    kwargs_upper_lens_light = []

    fixed_lens_light.append({})
    #kwargs_lens_light_init.append({'R_sersic': 0.5, 'n_sersic': 1, 'q': 1., 'phi_G': 0., 'center_x': 0, 'center_y': 0})
    kwargs_lens_light_init.append(kwargs_result['kwargs_lens_light'][0])
    kwargs_lens_light_sigma.append({'n_sersic': 0.1, 'R_sersic': 0.01, 'e1': 0.01, 'e2': 0.01, 'center_x': 0.01, 'center_y': 0.01})
    kwargs_lower_lens_light.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.01, 'n_sersic': 0.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens_light.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 8, 'center_x': 10, 'center_y': 10})

    lens_light_params = [kwargs_lens_light_init, kwargs_lens_light_sigma, fixed_lens_light, kwargs_lower_lens_light, kwargs_upper_lens_light]


    fixed_source = []
    kwargs_source_init = []
    kwargs_source_sigma = []
    kwargs_lower_source = []
    kwargs_upper_source = []

    fixed_source.append({})
    #kwargs_source_init.append({'R_sersic': 0.1, 'n_sersic': 1, 'q': 1., 'phi_G': 0., 'center_x': 0, 'center_y': 0})
    kwargs_source_init.append(kwargs_result['kwargs_source'][0])
    kwargs_source_sigma.append({'n_sersic': 0.01, 'R_sersic': 0.01, 'e1': 0.01, 'e2': 0.01, 'center_x': 0.01, 'center_y': 0.01})
    kwargs_lower_source.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.001, 'n_sersic': .5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_source.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 5., 'center_x': 10, 'center_y': 10})

    source_params = [kwargs_source_init, kwargs_source_sigma, fixed_source, kwargs_lower_source, kwargs_upper_source]

    kwargs_model = {'lens_model_list': lens_model_substructure_list, 
                    'lens_light_model_list': lens_light_model_list,
                    'source_light_model_list': source_model_list,
                    }

    kwargs_params = {'lens_model': lens_params,
                    'source_model': source_params,
                    'lens_light_model': lens_light_params}


    fitting_seq = FittingSequence(kwargs_data_joint, kwargs_model, kwargs_constraints, kwargs_likelihood, kwargs_params)
    fitting_kwargs_list = [['PSO', {'sigma_scale': 1., 'n_particles': 800, 'n_iterations': 100}]]

    start_time = time.time()
    chain_list = fitting_seq.fit_sequence(fitting_kwargs_list)
    kwargs_result = fitting_seq.best_fit()
    end_time = time.time()
    print(end_time - start_time, 'total time needed for computation')
    print('============ CONGRATULATION, YOUR JOB WAS SUCCESSFUL ================ ')
    print('kwargs_result after EPL, SHEAR, CNFW fitting:')
    print(kwargs_result)

    # %%
    modelPlot = ModelPlot(multi_band_list, kwargs_model, kwargs_result, arrow_size=0.02, cmap_string="gist_heat")
        
    f, axes = plt.subplots(2, 3, figsize=(16, 8), sharex=False, sharey=False)

    modelPlot.data_plot(ax=axes[0,0])
    modelPlot.model_plot(ax=axes[0,1])
    modelPlot.normalized_residual_plot(ax=axes[0,2], v_min=-6, v_max=6)
    modelPlot.source_plot(ax=axes[1, 0], deltaPix_source=0.01, numPix=100)
    modelPlot.convergence_plot(ax=axes[1, 1], v_max=1)
    modelPlot.magnification_plot(ax=axes[1, 2])
    f.tight_layout()
    f.subplots_adjust(left=0.05, bottom=0.05, right=None, top=0.9, wspace=0.1, hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_clump_fit.png")
    
    
    f, axes = plt.subplots(2, 3, figsize=(16, 8), sharex=False, sharey=False)

    modelPlot.decomposition_plot(ax=axes[0,0], text='Lens light', lens_light_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,0], text='Lens light convolved', lens_light_add=True)
    modelPlot.decomposition_plot(ax=axes[0,1], text='Source light', source_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,1], text='Source light convolved', source_add=True)
    modelPlot.decomposition_plot(ax=axes[0,2], text='All components', source_add=True, lens_light_add=True, unconvolved=True)
    modelPlot.decomposition_plot(ax=axes[1,2], text='All components convolved', source_add=True, lens_light_add=True, point_source_add=True)
    f.tight_layout()
    f.subplots_adjust(left=None, bottom=None, right=None, top=0.9, wspace=0., hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_clump_decomposition.png")
            
    f, axes = plt.subplots(1, 3, figsize=(16, 4), sharex=False, sharey=False)

    modelPlot.subtract_from_data_plot(ax=axes[0], text='Data')
    modelPlot.subtract_from_data_plot(ax=axes[1], text='Data - Lens Light', lens_light_add=True)
    modelPlot.subtract_from_data_plot(ax=axes[2], text='Data - Source Light', source_add=True)
    f.tight_layout()
    f.subplots_adjust(left=None, bottom=None, right=None, top=0.9, wspace=0.02, hspace=0.1)
    plt.suptitle(f"$theta_E$: {kwargs_pemd['theta_E']:.2f}, $R_c$: {kwargs_nfw['r_core']:.2f}, $R_s$: {kwargs_nfw['Rs']:.2f}")
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_clump_subtraction.png")
    # %% [markdown]
    # ## MCMC of the parameter space
    # after convergence (please check) we run an MCMC sampler (emcee with CosmoHammer)

    # %%
    # lens model choicers
    fixed_lens = []
    kwargs_lens_init = []
    kwargs_lens_sigma = []
    kwargs_lower_lens = []
    kwargs_upper_lens = []

    fixed_lens.append({}) 
    kwargs_lens_init.append(kwargs_result['kwargs_lens'][0])
    #kwargs_lens_init.append(kwargs_pemd)
    kwargs_lens_sigma.append({'theta_E': .01, 'e1': 0.01, 'e2': 0.01, 'gamma': 0.01, 'center_x': 0.01, 'center_y': 0.01})
    kwargs_lower_lens.append({'theta_E': 0.01,'e1': -0.5, 'e2': -0.5, 'gamma': 1.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens.append({'theta_E': 10, 'e1': 0.5, 'e2': 0.5, 'gamma': 2.5, 'center_x': 10, 'center_y': 10})

    fixed_lens.append({'ra_0': 0, 'dec_0': 0})
    kwargs_lens_init.append(kwargs_result['kwargs_lens'][1])
    #kwargs_lens_init.append(kwargs_shear)
    kwargs_lens_sigma.append({'gamma1': 0.01, 'gamma2': 0.01})
    kwargs_lower_lens.append({'gamma1': -0.2, 'gamma2': -0.2})
    kwargs_upper_lens.append({'gamma1': 0.2, 'gamma2': 0.2})


    fixed_lens.append({})
    kwargs_lens_init.append(kwargs_result['kwargs_lens'][2])
    #kwargs_lens_init.append(kwargs_nfw)
    kwargs_lens_sigma.append({'alpha_Rs': 0.05, 'r_core': 0.05 , 'Rs': 0.05, 'center_x': 0.1, 'center_y': 0.1})
    kwargs_lower_lens.append({'alpha_Rs': 0.,'r_core': 0.00 , 'Rs': 0.0001, 'center_x': -2, 'center_y': -2})
    kwargs_upper_lens.append({'alpha_Rs': 1., 'r_core': 1. ,'Rs': 2, 'center_x': 2, 'center_y': 2})

    lens_params = [kwargs_lens_init, kwargs_lens_sigma, fixed_lens, kwargs_lower_lens, kwargs_upper_lens]

    # lens light model choices
    fixed_lens_light = []
    kwargs_lens_light_init = []
    kwargs_lens_light_sigma = []
    kwargs_lower_lens_light = []
    kwargs_upper_lens_light = []

    fixed_lens_light.append({})
    #kwargs_lens_light_init.append({'R_sersic': 0.5, 'n_sersic': 1, 'q': 1., 'phi_G': 0., 'center_x': 0, 'center_y': 0})
    kwargs_lens_light_init.append(kwargs_result['kwargs_lens_light'][0])
    kwargs_lens_light_sigma.append({'n_sersic': 0.1, 'R_sersic': 0.01, 'e1': 0.01, 'e2': 0.01, 'center_x': 0.01, 'center_y': 0.01})
    kwargs_lower_lens_light.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.01, 'n_sersic': 0.5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_lens_light.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 8, 'center_x': 10, 'center_y': 10})

    lens_light_params = [kwargs_lens_light_init, kwargs_lens_light_sigma, fixed_lens_light, kwargs_lower_lens_light, kwargs_upper_lens_light]


    fixed_source = []
    kwargs_source_init = []
    kwargs_source_sigma = []
    kwargs_lower_source = []
    kwargs_upper_source = []

    fixed_source.append({})
    #kwargs_source_init.append({'R_sersic': 0.1, 'n_sersic': 1, 'q': 1., 'phi_G': 0., 'center_x': 0, 'center_y': 0})
    kwargs_source_init.append(kwargs_result['kwargs_source'][0])
    kwargs_source_sigma.append({'n_sersic': 0.1, 'R_sersic': 0.01, 'e1': 0.01, 'e2': 0.01, 'center_x': 0.1, 'center_y': 0.1})
    kwargs_lower_source.append({'e1': -0.5, 'e2': -0.5, 'R_sersic': 0.001, 'n_sersic': .5, 'center_x': -10, 'center_y': -10})
    kwargs_upper_source.append({'e1': 0.5, 'e2': 0.5, 'R_sersic': 10, 'n_sersic': 5., 'center_x': 10, 'center_y': 10})

    source_params = [kwargs_source_init, kwargs_source_sigma, fixed_source, kwargs_lower_source, kwargs_upper_source]

    kwargs_model = {'lens_model_list': lens_model_substructure_list, 
                    'lens_light_model_list': lens_light_model_list,
                    'source_light_model_list': source_model_list,
                    }

    kwargs_params = {'lens_model': lens_params,
                    'source_model': source_params,
                    'lens_light_model': lens_light_params}


    fitting_seq = FittingSequence(kwargs_data_joint, kwargs_model, kwargs_constraints, kwargs_likelihood, kwargs_params)

    fitting_kwargs_list = [['MCMC', {'n_burn': 200, 'n_run': 200, 'walkerRatio': 6, 'sigma_scale': 0.1}]]
    start_time = time.time()
    chain_list = fitting_seq.fit_sequence(fitting_kwargs_list)
    kwargs_result = fitting_seq.best_fit()
    end_time = time.time()
    print(end_time - start_time, 'total time needed for computation')
    print('============ CONGRATULATION, YOUR JOB WAS SUCCESSFUL ================ ')
    print('kwargs_result after MCMC:')
    print(kwargs_result)



    # %%
    from lenstronomy.Plots import chain_plot

    for i in range(len(chain_list)):
        chain_plot.plot_chain_list(chain_list, i)
        
    sampler_type, samples_mcmc, param_mcmc, dist_mcmc  = chain_list[0]


    print("number of non-linear parameters in the MCMC process: ", len(param_mcmc))
    print("parameters in order: ", param_mcmc)
    print("number of evaluations in the MCMC process: ", np.shape(samples_mcmc)[0])


    # import the parameter handling class #
    from lenstronomy.Sampling.parameters import Param
    # make instance of parameter class with given model options, constraints and fixed parameters #

    param = Param(kwargs_model, fixed_lens, fixed_source, fixed_lens_light, kwargs_lens_init=kwargs_lens, **kwargs_constraints)
    # the number of non-linear parameters and their names #
    num_param, param_list = param.num_param()


    mcmc_new_list = []
    labels_new = [r"$x_{clump}$", r"$y_{clump}$", r"$R_s$", r"$\alpha_{Rs}$", r"$R_{core}$"]
    for j in range(len(samples_mcmc)):
        # transform the parameter position of the MCMC chain in a lenstronomy convention with keyword arguments #
        kwargs_result = param.args2kwargs(samples_mcmc[j])
        mcmc_new_list.append([kwargs_result['kwargs_lens'][2]['center_x'], 
                            kwargs_result['kwargs_lens'][2]['center_y'], 
                            kwargs_result['kwargs_lens'][2]['Rs'], 
                            kwargs_result['kwargs_lens'][2]['alpha_Rs'],
                            kwargs_result['kwargs_lens'][2]['r_core']])

    fig = corner.corner(np.array(mcmc_new_list), labels=labels_new, show_titles=True)
    plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/model_{k}_corner.png")
    # Extract initial parameters
    initial_theta_E = kwargs_pemd['theta_E']  # Initial Einstein radius
    initial_Rs = kwargs_nfw['Rs']  # Initial scale radius
    
    # Calculate chi^2 value
    model_image = fitting_seq.image_model_class.image(kwargs_result['kwargs_lens'], kwargs_result['kwargs_source'], kwargs_result['kwargs_lens_light'])
    residuals = kwargs_data_joint[0]['image_data'] - model_image
    noise_map = kwargs_data_joint[0]['noise_map']
    chi2 = np.sum((residuals / noise_map) ** 2)
    
    theta_E_list = []
    Rs_list = []
    chi2_list = []

    # Store the data
    theta_E_list.append(initial_theta_E)
    Rs_list.append(initial_Rs)
    chi2_list.append(chi2)

# Convert lists to numpy arrays
theta_E_array = np.array(theta_E_list)
Rs_array = np.array(Rs_list)
chi2_array = np.array(chi2_list)

# Create a 2D grid for the heatmap
theta_E_bins = np.linspace(min(theta_E_array), max(theta_E_array), 50)
Rs_bins = np.linspace(min(Rs_array), max(Rs_array), 50)
theta_E_grid, Rs_grid = np.meshgrid(theta_E_bins, Rs_bins)

# Interpolate chi^2 values onto the grid
from scipy.interpolate import griddata
chi2_grid = griddata((theta_E_array, Rs_array), chi2_array, (theta_E_grid, Rs_grid), method='linear')

# Plot the heatmap
plt.figure(figsize=(10, 8))
heatmap = plt.pcolormesh(theta_E_grid, Rs_grid, chi2_grid, shading='auto', cmap='viridis')
plt.colorbar(heatmap, label=r'$\chi^2$')
plt.xlabel(r'Initial $\theta_E$ (Einstein Radius)')
plt.ylabel(r'Initial $R_s$ (Scale Radius)')
plt.title(r'Heatmap of $\chi^2$ vs $\theta_E$ and $R_s$')
plt.tight_layout()
plt.savefig(f"/data/a.saricaoglu/repo/RubinsForge/LenSim/plots/{c.strftime('%m.%d')}/{c.strftime('%H%M')}/heatmap.png")
